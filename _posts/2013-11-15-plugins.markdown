---
layout: post
title:  "Введение в OpenSceneGraph: Система плагинов. Импорт и экспорт данных"
date:   2018-11-15 13:55:00 +0300
categories: jekyll update
---

Где-то в предыдущих уроках уже говоилось о том, что OSG поддерживает загрузку разного рода ресурсов типа растровых изображений, 3D-моделей различных форматов, или, например, шрифты через собственную систему плагинов. Плагин OSG является отдельным компонентом, расширяющим функционал движка и обладающий интерфейсом, стандартизированным в пределах OSG. Плагин реализуется как динамическая разделяемая библиотека (dll в Windows, so в Linux и т.д). Имена библиотек плагинов соотвествуют определенному соглашению

```
osgdb_<расширение файла>.dll
```

то есть в имени плагина всегда присутсвует префикс osgdb_. Расширение файла указывает движку какой плагин следует использовать для загрузки файла с данным расширением. Например, когда мы пишем в коде функцию

```cpp
osg::ref_ptr<osg::Node> model = osgDB::readNodeFile("cessna.osg");
```

движок видит расширение osg и загружает плагин с именем osgdb_osg.dll (или osgdb_osg.so в случает Linux). Код плагина выполняет всю черную работу, возвращая нам указатель на ноду, описывающую модель цессны. Аналогичным образом, попытка загрузки изображения формата PNG

```cpp
osg::ref_ptr<osg:Image> image = osgDB::readImageFile("picture.png");
```

приведет к тому, что будет загружен плагин osgdb_png.dll, в котором реализован алгоритм чтения данных из картинки в формате PNG и помещение этих данных в объект типа osg::Image.

Все операции по работе с внешними ресурсами реализуются функциями библиотеки osgDB, с которой мы неизменно линкуем программы из примера в пример. Эта библиотека опирается на систему плагинов OSG. На сегодняшний день в комплек OSG входит множество плагинов, обеспечивающих работу с большинством используемых на практике форматов изображений, 3D-моделей и шрифтов. Плагины обеспечивают как чтение данных (импорт) определенного формата, так и, в большинстве случаем запись данных в файл необходимого формата (экспорт). На систему плагинов опирается в частности утилита osgconv, позволяющая преобразовать данные из одного формата в другой, например

```
$ osgconv cessna.osg cessna.3ds
```

легко и непринужденно коневертирует osg-модель цессны в формат 3DS, который потом может быть импортирован в 3D-редактор, например в Blender (кстати сказать для Blender существует [расширение для работы с osg непосредственно](https://github.com/cedricpinson/osgexport))

![](https://habrastorage.org/webt/vy/dm/qm/vydmqm2a3evtdqxu2vtf_kknmrw.png)

Существует официальный перечень стандартных плагинов OSG с описанием их назначения, но он длинный и мне лень приводить его здесь. Проще заглянуть по пути установки библиотеки в папку bin/ospPlugins-x.y.z, где x, y, z - номер версии OSG. Из имени файл плагина легко понять какой формат он обрабатывает.

Если OSG собран компилятором MinGW, то к стандартному имени плагина добавляется дополнительный префикс mingw_, то есть имя будет выглядеть так

```
mingw_osgdb_<расширение файла>.dll
```

Версия плагина, собранная в конфигурации DEBUG дополнительно снабжается суффиксом d в конце имени, то есть формат будет такой

```
osgdb_<расширение файла>d.dll
```

или

```
mingw_osgdb_<расширение файла>d.dll
```

при сборке MinGW.

