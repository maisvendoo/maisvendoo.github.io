---
layout: post
title:  "Введение в OpenSceneGraph: Обход графа сцены. Ноды трансформации"
date:   2018-11-02 09:19:00 +0300
categories: jekyll update
---

Типичный алгоритм обхода графа сцены состоит из следующих шагов:

1. Начинаем с произвольного узла (например с корневого узла)
2. Перемещение вниз (или вверх) по графу сцены рекурсивно до достижения листового узла или узла, не имеющего дочерних узлов
3. Откат к самому последнему узлу, на котором не завершается поиск и повторение шагов 1 и 2. Это называется поиском в грубину по графу сцены.

Во время обхода графа к узлам сцены применяются различные операции обновления и рендеринга. Существует несколько типов обхода, преследующих различные цели:

1. Обход с целью обработки событий ввода вывода от мыши и клавиатуры и других пользовательских устройств ввода
2. Обход с целью обновления узлов, позволяющий пользовательскому приложению модифицировать граф, например устанавливать совйства узлам и геометрии, применять к нодым новую функциональность, выполнение обратных вызовов (callbacks) и так далее.
3. Обход с целью отсечения невыидимых и неотображаемых узлов и выод оптимизированного дерева во внутрений список рендеринга.
4. Обход отрисовки (рендеринга) - выполнение низкоуровневых инструкций OpenGL для отображения сцены на экране. Следует помнить, что процесс рендеренга никах не коррелируется с текущим состоянием графа сцены, а выполняется по списку, сгенерированного после прохода отсечения.

Если говорить в целом, то эти обходы выполняются за время отрисовки кадра один за другим. Однако, в многопроцессорных и многоядерных системах OSG может выполнять эти проходы параллельно. Для реализации обхода графа может использоваться паттерн Visitor, о чем мы поговорим чуть попозже.

## Ноды трансформации

Узлы osg::Group не могут делать никаких преобразований, кроме возможности перехода к своим дочерним узлам. Для пространственного перемещения геометрии OSG предоставляет класс osg::Transform. Этот класс является наследником класса osg::Group, но и сам является абстрактным - на практике вместо него применяются его наследники, реализующие различные пространственные преобразования геометрии. При обходе графа сцены узел osg::Transform добавляет свое преобразование в текущую матрицу преобразования OpenGL. Это эквивалентно перемножению матриц преобразования OpenGL, выполняемое командой glMultMatrix()

![](https://habrastorage.org/webt/sj/f7/ql/sjf7qlofwivlimwfljauwnll9nw.png)

Этот пример графа сцены можно транслировать в следующий кода на OpenGL

```cpp
glPushMatrix();
	glMultMatrix( matrixOfTransform1 );
	renderGeode1(); 
	
	glPushMatrix();
		glMultMatrix( matrixOfTransform2 );
		renderGeode2();
	glPopMatrix();

glPopMatrix();
```

Можно стказать, что положение Geode1 задается в системе координат Transform1, а положение Geode2 задается в системе координат Transform2, смещенной относительно Transform1. При этом в OSG можно включить позиционирование в абсолютных координатах, что приведет к поведению объекта, эквивалентному результату команды glGlobalMatrix() OpenGL

```cpp
transformNode->setReferenceFrame( osg::Transform::ABSOLUTE_RF );
```

Можно переключится обратно в режим позиционирования относительными координатами

```cpp
transformNode->setReferenceFrame( osg::Transform::RELATIVE_RF );
```

## Понятие о матрице преобразования координат

Тип osg::Matrix это базовый тип OSG не управляемый умными указателями. Он предоставляет интерфейс к операциями над матрицами размерности 4х4, описывающими преобразование координат, такин как перемещение, поворот, масштабирование и вычистение проекций. Матрица может быть задана явно

```cpp
osg::Matrix mat( 1.0f, 0.0f, 0.0f, 0.0f,
				 0.0f, 1.0f, 0.0f, 0.0f,
				 0.0f, 0.0f, 1.0f, 0.0f,
				 0.0f, 0.0f, 0.0f, 1.0f ); // Единичная матрица 4х4

```

Класс osg::Matrix предоставляет следующие публичные методы

1. postMult() и operator* () - умножение справа текущей матрицы на матрицу или вектор, переданные в качестве параметра. Метод preMult() выполняет умножение слева.
2. makeTranslate(), makeRotate() и makeScale() - сбрасывают текущую матрицу и создают матрицу 4х4 описывающую перемещение, вращение и масштабирование. их статические версии translate(), rotate() и scale() могут быть использованы для сосздания матричного объекта со специфическими параметрами.
3. invert() - вычисление матрицы обратной текущей. Его статическая версия inverse() принимает в качестве параметра матрицу и возвращает новую матрицу, обратную данной.